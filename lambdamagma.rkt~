#lang racket
(require (planet dvanhorn/grammar:1:3/grammar))
 (define-grammar lambda-calculus?
    (grammar <expression>
      (<expression>  (alt <variable> <application> <abstraction>))
      (<application> (lst <expression> <expression>))
      (<abstraction> (lst 'lambda (lst <variable>) <expression>))
      (<variable>    (predicate 
                      (Î» (x) (and (symbol? x) (not (eq? x 'lambda))))))
      (<magma>  (lst <expression> <selfdistr> <expression>))))
  
 